version: 2.1

restore_cache: &restore_cache
  - restore_cache:
      key: scons2-{{ arch }}
      
save_cache: &save_cache
  - save_cache:
      key: scons2-{{ arch }}
      paths:
#         - /home/circleci/.scons_cache
        - /root/.scons_cache
        
save_cache_linux: &save_cache_linux
  - save_cache:
      key: scons2-{{ arch }}
      paths:
        - /home/circleci/.scons_cache
        
save_cache_macos: &save_cache_macos
  - save_cache:
      key: scons-{{ arch }}
      paths:
        - /Users/distiller/.scons_cache        
        
install_clang: &install_clang
  - run:
      name: Install Clang
      command: |
        sudo apt-get update
        sudo apt install -y software-properties-common
        sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -        
        sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main"
        sudo apt-get update
        sudo apt-get install -y clang-7 lldb-7 lld-7        
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 1000
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 1000
        sudo update-alternatives --config clang
        sudo update-alternatives --config clang++
        # Set compiler to clang 
        echo 'export CC=${CC:-clang}' >> $BASH_ENV
        echo 'export CC_FOR_BUILD=${CC_FOR_BUILD:-clang}' >> $BASH_ENV
        clang --version        
        
install_gcc-9: &install_gcc-9
  - run:
      name: Install GCC 9
      command: |
        sudo apt-get update
        sudo apt install -y software-properties-common
        #sudo apt-key adv --recv-key 1E9377A2BA9EF27F         
        #sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test        
        sudo apt-get update
        sudo apt install -y gcc-9 g++-9
        gcc-9 --version
        
install_linux_deps: &install_linux_deps
  - run:
      name: Install Linux Dependencies
      command: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev

install_mono_deps: &install_mono_deps
  - run:
      name: Install Linux Mono Dependencies
      command: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        sudo apt install apt-transport-https ca-certificates
        echo "deb https://download.mono-project.com/repo/ubuntu stable-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        sudo apt update
        sudo apt install -y mono-devel msbuild nuget

# before_install template
before_install: &before_install
  - run:
      name: Before Install
      command: |
        echo "${MATRIX_EVAL}"
        echo "${MATRIX_EVAL}" >> $BASH_ENV
        echo "${CC}"
        echo "${CXX}"
        if [ "$STATIC_CHECKS" = "yes" ]; then
          unset SCONS_CACHE;
        fi
        
# install template
install: &install  
  - run:
      name: Install
      command: |
        pip install --user scons;
        if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$PLATFORM" = "android" ]; then
          misc/travis/android-tools-linux.sh;
        fi
        if [ "$TRAVIS_OS_NAME" = "osx" ]; then
          echo 'export PATH='"${PATH}:/Users/distiller/Library/Python/2.7/bin;" >> $BASH_ENV
        fi
        if [ "$TRAVIS_OS_NAME" = "osx" ] && [ "$PLATFORM" = "android" ]; then
          misc/travis/android-tools-osx.sh;
        fi
        
# before_script template
before_script: &before_script
  - run:
      name: Before Script
      command: |
        if [ "$PLATFORM" = "android" ]; then
          echo 'export ANDROID_HOME='"$CIRCLE_WORKING_DIRECTORY/godot-dev/build-tools/android-sdk;" >> $BASH_ENV
          echo 'export ANDROID_NDK_ROOT='"$CIRCLE_WORKING_DIRECTORY/godot-dev/build-tools/android-ndk;" >> $BASH_ENV
        fi
        
# script template
script: &script
  - run:
      name: Script
      command: |
        if [ "$STATIC_CHECKS" = "yes" ]; then
          sh ./misc/travis/clang-format.sh;
        else
          scons -j2 CC=$CC CXX=$CXX platform=$PLATFORM tools=$TOOLS target=$TARGET $OPTIONS $EXTRA_ARGS;
        fi
        
# interpolated variables template
set_variables: &set_variables
  - run:
      name: Set Interpolated Variables
      command: |
        # update PATH so pip installs are accessible
        echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
        echo 'export SCONS_CACHE='"$HOME/.scons_cache" >> $BASH_ENV
        echo 'SCONS_CACHE_LIMIT=1024' >> $BASH_ENV
        echo 'OPTIONS="debug_symbols=no verbose=yes progress=no builtin_libpng=yes"' >> $BASH_ENV
        # - secure: "uch9QszCgsl1qVbuzY41P7S2hWL2IiNFV4SbAYRCdi0oJ9MIu+pVyrQdpf3+jG4rH6j4Rffl+sN17Zz4dIDDioFL1JwqyCqyCyswR8uACC0Rr8gr4Mi3+HIRbv+2s2P4cIQq41JM8FJe84k9jLEMGCGh69w+ibCWoWs74CokYVA="
        
jobs:      
  static-checks-clang-format:
    environment:
      STATIC_CHECKS: "yes"
      TRAVIS_OS_NAME: linux
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - <<: *set_variables      
      - run: 
          name: Installing APT Packages
          command: |
            sudo apt-get update
            sudo apt install -y software-properties-common
            sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -        
            sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main"
            sudo apt-get update
            sudo apt-get install -y clang-format-8                  
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache
      
  linux-editor-debug-GCC9-with-Mono:
    environment:
      PLATFORM: x11
      TOOLS: "yes"
      TARGET: debug
      CACHE_NAME: x11-tools-mono-gcc-9
      MATRIX_EVAL: "CC=gcc-9 && CXX=g++-9" 
      EXTRA_ARGS: "module_mono_enabled=yes mono_glue=no warnings=extra werror=yes"
      TRAVIS_OS_NAME: linux
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *set_variables
      - <<: *install_gcc-9
      - <<: *install_linux_deps
      - <<: *install_mono_deps
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_linux

  linux-export-template-release-Clang:
    environment:
      PLATFORM: x11
      TOOLS: "no"
      TARGET: release
#       TOOLS: "yes"
#       TARGET: debug
      CACHE_NAME: x11-clang
      EXTRA_ARGS: "warnings=extra werror=yes"
      TRAVIS_OS_NAME: linux
      MATRIX_EVAL: "CC=clang && CXX=clang++" 
    machine:
      image: ubuntu-1604:201903-01    
    steps:
      - checkout      
      - <<: *set_variables
      - <<: *install_clang
      - <<: *install_linux_deps
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_linux

  android-export-template-release_debug-Clang:
    environment:
      PLATFORM: android
      TOOLS: "no"
      TARGET: release_debug
      CACHE_NAME: android-clang
      EXTRA_ARGS: "warnings=extra werror=yes"
      TRAVIS_OS_NAME: linux
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *set_variables
      - <<: *install_clang
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_linux

  macOS-editor-debug-Clang:
    environment:
      PLATFORM: osx
      TOOLS: "yes"
      TARGET: debug
      CACHE_NAME: osx-tools-clang
      TRAVIS_OS_NAME: osx
      MATRIX_EVAL: "CC=clang && CXX=clang++" 
    macos:
      xcode: "10.0.0"
    steps:
      - checkout
      - <<: *set_variables
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_macos

  iOS-export-template-debug-Clang:
    environment:
      PLATFORM: iphone
      TOOLS: "no"
      TARGET: debug
      CACHE_NAME: iphone-clang
      TRAVIS_OS_NAME: osx
      MATRIX_EVAL: "CC=clang && CXX=clang++" 
    macos:
      xcode: "10.0.0"
    steps:
      - checkout
      - <<: *set_variables
      - <<: *set_variables
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_macos

  linux-headless-editor-release_debug-GCC9:
    environment:
      PLATFORM: server
      TOOLS: "yes"
      TARGET: release_debug
      CACHE_NAME: server-tools-gcc-9
      MATRIX_EVAL: "CC=gcc-9 && CXX=g++-9"
      EXTRA_ARGS: "warnings=extra werror=yes"
      TRAVIS_OS_NAME: linux
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *set_variables
      - <<: *install_gcc-9
      - <<: *install_linux_deps
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_linux

  linux-export-template-release_debug-GCC5-without-3D-support:
    environment:
      PLATFORM: x11
      TOOLS: "no"
      TARGET: release_debug
      CACHE_NAME: x11-gcc-5
      EXTRA_ARGS: "disable_3d=yes"
      TRAVIS_OS_NAME: linux
      MATRIX_EVAL: "CC=gcc && CXX=g++" 
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *set_variables
      - <<: *install_linux_deps
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache_linux

workflows:
  version: 2
  build_and_test:
    jobs:
#       - static-checks-clang-format
#       - linux-editor-debug-GCC9-with-Mono
      - linux-export-template-release-Clang
#       - android-export-template-release_debug-Clang
#       - macOS-editor-debug-Clang
#       - iOS-export-template-debug-Clang
#       - linux-headless-editor-release_debug-GCC9
#       - linux-export-template-release_debug-GCC5-without-3D-support
